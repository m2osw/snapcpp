#!/bin/sh

set -e

# Make sure the script is called from the right place
#
if test ! -x bin/build-snap
then
	echo "error: This script must be run from the snapcpp top directory"
	echo "error: i.e. the command line generally looks like:"
	echo "error:           bin/build-snap --processors 8 --email build@m2osw.com"
	echo "error: (note: default parameters can be saved in ~/.build-snap.rc)"
	exit 1;
fi

# You may change the compiler with something like this:
# (The CMAKE_C_COMPILER and CMAKE_CXX_COMPILER will NOT work)
#
#export CC=gcc-10.3
#export CXX=g++-10.3 cmake


# Whether make is invoked at the end of the cmake process (--no-build)
#
DO_BUILD=debug


# By default use one processor for your build, you can increase that
# number here or use the --processors command line option
#
# We could also use `nproc`, but memory is important too, not just the
# number of processors. A full build with a large number of processors
# requires a lot of memory (i.e. on my 64 CPU machine, there are times
# when the process uses well over 10Gb of RAM while compiling with that
# many processors).
#
PROCESSORS=1


# Default come from cmake setups--these may not be up to date but it should
#                                 give you an idea about possible values
#
#DEBUILD_EMAIL="Build Server <build@m2osw.com>"
#DEBUILD_PLATFORM=hirsute


# Source the user defined .build-snap.rc file
# In most cases this is used to define the DEBUILD_EMAIL to your own
# email address so you can sign all the packages properly.
#
if test -f ~/.build-snap.rc
then
	# This lets you redefine one or more of the variables defined above
	# this "if-block"
	#
	. ~/.build-snap.rc
fi


# Check the command line options if any
#
while test -n "$1"
do
	case "$1" in
	-h|--help)
		echo
		echo "Usage: $0 [--opts]"
		echo
		echo "where --opts can be one of:"
		echo "   --email \"name <name@example.com>\"      define the debuild email"
		echo "   --build | --build-all | --build-all-parallel | --build-release | --build-sanitize | --no-build"
		echo "                                          whether to run make after the cmake commands"
		echo "   --help | -h                            print out this screen"
		echo "   --processors <count>                   processors used to compile"
		echo
		echo "note: default parameters can be saved in ~/.build-snap.rc"
		echo "      for --email use DEBUILD_EMAIL=..."
		echo "      for --build use DO_BUILD=..."
		echo "      for --processors use PROCESSORS=..."
		echo
		echo "The valid DO_BUILD values are:"
		echo "      all, debug, no, parallel, release, sanitize"
		exit 1;
		;;

	--email)
		shift
		if test -z "$1"
		then
			echo "the --email is expected to be followed by an email address"
			exit 1;
		fi
		DEBUILD_EMAIL="$1"
		shift
		;;

	--build)
		shift
		DO_BUILD=debug
		;;

	--build-all)
		shift
		DO_BUILD=all
		;;

	--build-all-parallel)
		shift
		DO_BUILD=parallel
		;;

	--build-release)
		shift
		DO_BUILD=release
		;;

	--build-sanitize)
		shift
		DO_BUILD=sanitize
		;;

	--no-build)
		shift
		DO_BUILD=no
		;;

	--processors)
		shift
		if test -z "$1"
		then
			echo "the --processors is expected to be followed by a number"
			exit 1;
		fi
		PROCESSORS="$1"
		shift
		;;

	*)
		echo "error: unknown command line option \"$1\""
		exit 1;
		;;

	esac
done

if test ${PROCESSORS} -le 0
then
	echo "error: the number of processors must be a positive number."
	exit 1
fi

# Verify memory levels
FREE_MEM=`grep MemFree: /proc/meminfo | awk '{ print int($2 / 1048576) }'`
REQUIRED_MEM=`expr ${PROCESSORS} \* 4`
if test ${FREE_MEM} -lt ${REQUIRED_MEM}
then
	echo "warning: you are low on memory..."
	if test ${PROCESSORS} -eq 1
	then
		echo "warning: since you requested a single processor, you probably don't have much chose at the moment."
	else
		MAX_PROCESSORS=`expr ${FREE_MEM} / 4`
		if test ${MAX_PROCESSORS} -le 0
		then
			echo "warning: we suggest you try to compile with a single processor"
		else
			echo "warning: we suggest you try compiling with only ${MAX_PROCESSORS} processors"
		fi
	fi
	echo -n "warning: do you want to continue with ${PROCESSORS} processors? (y/[N]) "
	read ANSWER
	if test "${ANSWER}" != "y" -a "${ANSWER}" != "Y"
	then
		echo "error: build process aborted."
		exit 1
	fi
fi


echo "info: Use ${PROCESSORS} processors to compile Snap! C++"

if test -n "$DEBUILD_EMAIL"
then
	DEBUILD_EMAIL_VAR="-DDEBUILD_EMAIL=$DEBUILD_EMAIL"
else
	DEBUILD_EMAIL_VAR=""
fi

# Full clean up
#
rm -rf BUILD /tmp/SnapFindDeps.pl.hash

# Start working on the new BUILD folder
#
mkdir BUILD
cd BUILD

# Configure and generate the Release version
#
(
	echo
	echo "========================== CONFIGURE RELEASE =========================="
	echo
	mkdir Release
	cd Release
	cmake \
		-DCMAKE_BUILD_TYPE=Release \
		-DMAKEFLAGS=-j$PROCESSORS \
		-DBUILD_ONCE=OFF \
		-DSANITIZE=OFF \
		"$DEBUILD_EMAIL_VAR" \
			../..
)

# Do not build the release version by default
# Use something like:
#        make -C BUILD/Release

# Configure and generate the Debug version
#
(
	echo
	echo "========================== CONFIGURE DEBUG =========================="
	echo
	mkdir Debug
	cd Debug
	cmake \
		-DCMAKE_BUILD_TYPE=Debug \
		-DMAKEFLAGS=-j$PROCESSORS \
		-DBUILD_ONCE=OFF \
		-DSANITIZE=OFF \
		"$DEBUILD_EMAIL_VAR" \
			../..
)

# Configure and generate the Sanitized version
#
(
	echo
	echo "========================== CONFIGURE SANITIZE =========================="
	echo
	mkdir Sanitize
	cd Sanitize
	cmake \
		-DCMAKE_BUILD_TYPE=Debug \
		-DMAKEFLAGS=-j$PROCESSORS \
		-DBUILD_ONCE=OFF \
		-DSANITIZE=ON \
		"$DEBUILD_EMAIL_VAR" \
			../..
)

# Build the Debug version
#
case $DO_BUILD in
"all")
	(
		echo
		echo "========================== BUILD DEBUG =========================="
		echo
		cd Debug
		make
	)
	(
		echo
		echo "========================== BUILD SANITIZE =========================="
		echo
		cd Sanitize
		make
	)
	(
		echo
		echo "========================== BUILD RELEASE =========================="
		echo
		cd Release
		make
	)
	;;

"parallel")
	(
		echo
		echo "========================== BUILD DEBUG =========================="
		echo
		cd Debug
		make
	) &
	(
		echo
		echo "========================== BUILD SANITIZE =========================="
		echo
		cd Sanitize
		make
	) &
	(
		echo
		echo "========================== BUILD RELEASE =========================="
		echo
		cd Release
		make
	) &
	wait
	;;

"debug")
	(
		echo
		echo "========================== BUILD DEBUG =========================="
		echo
		cd Debug
		make
	)
	;;

"sanitize")
	(
		echo
		echo "========================== BUILD SANITIZE =========================="
		echo
		cd Sanitize
		make
	)
	;;

"release")
	(
		echo
		echo "========================== BUILD RELEASE =========================="
		echo
		cd Release
		make
	)
	;;

"no")
	echo
	echo "No building."
	echo
	;;

*)
	echo "error: unexpected value for DO_BUILD ($DO_BUILD)"
	exit 1
	;;

esac

