# Snap! C++ Builder
#
# Setup the Snap! C++ Builder GUI Tool


# launchpad_url=<url>
#
# The URL used to read the project data (a JSON file).
#
# The URL must include a @PROJECT_NAME@ parameter which snapbuilder replaces
# with the name of the project to retrieve.
#
# Default: https://api.launchpad.net/devel/~snapcpp/+archive/ubuntu/ppa?ws.op=getBuildRecords&ws.size=10&ws.start=0&source_name=@PROJECT_NAME@
#launchpad_url=https://api.launchpad.net/devel/~snapcpp/+archive/ubuntu/ppa?ws.op=getBuildRecords&ws.size=10&ws.start=0&source_name=@PROJECT_NAME@


# distribution=<name>
#
# One name to use as the distribution name when updating the build version.
#
# As time passes, the default may stop working so you may need to update
# this configuration file to have one that works.
#
# Examples (one of): bionic, focal, hirsute, jammy, lunar, mantic
#
# Default: jammy
distribution=jammy


# release_names=<name1>,<name2>,...
#
# A list of release names separated by commas.
#
# This is the list of releases currently supported on Launchpad. In most cases,
# this list doesn't change much at all.
#
# The list of architectures (see below) is actually controlled on Launchpad
# directly, but we also need that other list to know which file(s) to check
# for the latest compiled version of a package.
#
# Default: <none>
release_names=bionic,focal,hirsute


# architecture_names=<name1>,<name2>,...
#
# A list of architectures to check and see whether the compile process
# worked on or not.
#
# Which architectures are supported for (unfortunately, all) the packages
# is defined by check boxes on Launchpad. We still need to have a list
# here because the Packages.gz files we download are specific to an
# architecture. So to be able to test all the versions and know where
# we're at, we have to have these names.
#
# Default: <empty>
#architecture_names=




