/*
 * Header:
 *      include/QtSerialization/QSerialization.h
 *
 * Description:
 *      Handling of serialization in a forward and backward manner.
 *
 * Documentation:
 *      See the corresponding .cpp file.
 *
 * License:
 *      Copyright (c) 2012-2022  Made to Order Software Corp.  All Rights Reserved
 * 
 *      https://snapwebsites.org/
 *      contact@m2osw.com
 * 
 *      Permission is hereby granted, free of charge, to any person obtaining a
 *      copy of this software and associated documentation files (the
 *      "Software"), to deal in the Software without restriction, including
 *      without limitation the rights to use, copy, modify, merge, publish,
 *      distribute, sublicense, and/or sell copies of the Software, and to
 *      permit persons to whom the Software is furnished to do so, subject to
 *      the following conditions:
 *
 *      The above copyright notice and this permission notice shall be included
 *      in all copies or substantial portions of the Software.
 *
 *      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *      OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *      MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *      IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *      CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 *      TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#ifndef QT_SERIALIZATION_H
#define QT_SERIALIZATION_H

#include "QtSerialization/QSerializationField.h"
#include <QFile>

namespace QtSerialization
{

namespace {
    /** \brief The serialization library version (major number).
     *
     * This variable can be accessed to read the major version number of
     * the libQtSerialization library. Note that this variable is defined
     * in the header file so it represents the version you are compiling
     * with and not the version of the library your software will link
     * against when running.
     */
    const int   QT_SERIALIZATION_LIBRARY_VERSION_MAJOR  = @LIBQTSERIALIZATION_VERSION_MAJOR@;

    /** \brief The serialization library version (minor number).
     *
     * This variable can be accessed to read the minor version number of
     * the libQtSerialization library. Note that this variable is defined
     * in the header file so it represents the version you are compiling
     * with and not the version of the library your software will link
     * against when running.
     */
    const int   QT_SERIALIZATION_LIBRARY_VERSION_MINOR  = @LIBQTSERIALIZATION_VERSION_MINOR@;

    /** \brief The serialization library version (patch number).
     *
     * This variable can be accessed to read the patch version number of
     * the libQtSerialization library. Note that this variable is defined
     * in the header file so it represents the version you are compiling
     * with and not the version of the library your software will link
     * against when running.
     */
    const int   QT_SERIALIZATION_LIBRARY_VERSION_PATCH  = @LIBQTSERIALIZATION_VERSION_PATCH@;

    /** \brief The library version as a string.
     *
     * This variable is a string representing the full library version
     * defined as "<major>.<minor>.<patch>".
     *
     * Note that this variable is defined in the header file so it
     * represents the version you are compiling with and not the version
     * of the library your software will link against when running.
     */
#pragma GCC push
#pragma GCC diagnostic ignored "-Wunused-variable"
    const char *QT_SERIALIZATION_LIBRARY_VERSION_STRING = "@LIBQTSERIALIZATION_VERSION_MAJOR@.@LIBQTSERIALIZATION_VERSION_MINOR@.@LIBQTSERIALIZATION_VERSION_PATCH@";
#pragma GCC pop

    /** \brief The version of the data saved in the output.
     *
     * This version defines the current file format. It should never
     * be necessary, but we never know. For backward compatibility
     * it may be useful one day.
     *
     * Note that this variable is defined in the header file so it
     * represents the version you are compiling with and not the version
     * of the library your software will link against when running.
     *
     * Plus, this version is saved in the file at the time you serialize
     * your data. That version may yet be another version. You can know
     * the version of a file you are loading using the differen version
     * functions of the QReader class.
     *
     * \sa QReader::file_format_version()
     * \sa QReader::major_version()
     * \sa QReader::minor_version()
     */
    const quint16 FILE_FORMAT_VERSION = 1;
}

int QLibraryVersionMajor();
int QLibraryVersionMinor();
int QLibraryVersionPatch();
const char *QLibraryVersion();
int QLibraryFileFormatVersion();

} // namespace QtSerialization
#endif
//#ifndef QT_SERIALIZATION_H
// vim: ts=4 sw=4 et
