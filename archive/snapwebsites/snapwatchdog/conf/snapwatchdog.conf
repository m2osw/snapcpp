# Sample of Snap! Watchdog configuration file
#
# The file is a basic list of variable name = value
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored


# debug=on
#
# Whether you want to turn on debug mode (variable is set) of the server.
# The default is off (variable undefined). This is exactly the same as
# using the --debug command line option. This is useful as the command
# line option is harder to use when working with systemd.
#
# When this flag is turned on, you get all the logs from the plugins.
# Otherwise, the log level is raised to WARNING to avoid the large
# load of logs that the plugins generate (each one by itself does not
# generate much, in most cases one or two lines of log, but when you
# multiply that by the number of plugins every single minute, it fills
# over 12Mb of logs daily!)
#
# Default: <undefined>
#debug=on


# log_config=<path to log properties>
#
# This variable defines the properties that log4cplus library will read
# to handle logging of the snapwatchdog daemon.
#
# Default: /etc/snapwebsites/logger/snapwatchdog.properties
log_config=/etc/snapwebsites/logger/snapwatchdog.properties


# statistics_period=<number of readings to cycle through>
#
# The period defines the duration for which the statistics are kept around.
# After that amount, new statistics overwrite old statistics.
#
# The minimum is 1 hour (3600)
#
# IMPORTANT: This value is currently rounded up to 1 hour, so you should use
#            a multiple of 3600 to make it easier to graps
#
# 1 week is 604800 seconds
#
# Default: 604800
statistics_period=604800


# statistics_frequency=<interval between statistics gathering>
#
# The statistics frequency defines how often we read new data in seconds
#
# The minimum frequency is 1 minute (60 seconds)
#
# Default: 60
statistics_frequency=60


# statistics_ttl=<how long to keep statistics in Cassandra>
#
# The statistics can also be saved in the Cassandra cluster. In that case,
# they are given a TLL in seconds representing the amount of time they will
# be kept in the database.
#
# Because of the way we save the data in the Cassandra cluster and the
# way the cluster is implemented, having a TTL will help greatly in not
# keeping all the data forever. However, Cassandra has a hard time with
# deleting old data, managing the tombstones can be a very slow process.
# This is why by default we currently keep this feature turned off.
#
# In most cases you want to use the same number as defined in the
# statistic_period parameter or a little more. Note, however, that
# this makes use of the Cassandra database in a way which is not very
# good for this kind of database. i.e. it will use it in a way similar to
# a queue. That means a table with a lot of tombstones which can be
# really bad as far as Cassandra is concerned.
#
# 1 week is 604800 seconds
#
# To turn off the feature, set the value to "off" (without the quotes)
# or to zero (`statistics_ttl=off` or `statistics_ttl=0`).
#
# To setup the TTL to the same value as the statistics_period whatever
# that value is, you can set this parameter to "use-period".
#
# Default: off
statistics_ttl=off


# error_report_settle_time=<seconds before generating error reports by email>
#
# This parameter is used to determine the amount of time the snapwatchdog
# should wait before a report gets sent. It is quite often that when you
# first start a server, all things are not running as expected. Many
# services may take up to a couple of minutes to get settle in as expected.
#
# The default is set to five minutes. That means the snapwatchdog server
# won't send any errors by email for that long. After that, it works as
# expected. The system accepts a minimum of one minute (60).
#
# During that time, administrators can still view the list of errors by
# going to snapmanager.cgi and click on the Snap Watchdog menu.
#
# Default: 300
#error_report_settle_time=300


# error_report_low_priority=<priority>[,<span>]
#
# The minimum priority an error has to have before we start sending emails.
# The default is 10. The minimum is 1. The maximum for this priority is 50.
#
# The span to wait between reports when errors only have a very low priority
# (i.e. between low priority and medium priority). This is one week by
# default, defined in seconds (86400 x 7). The minimum for <span> is one
# day (86400).
#
# The minimum span for low priority errors is one day. There is no maximum.
# Of course, really large numbers would likely prevent low priority errors
# from generating reports. If that's what you are trying to do, use a
# priority of 50 and keep the medimum priority at 50. That way errors with
# a priority of 49 or less do not trigger the email report.
#
# Errors with a priority lower than this value are ignored when snapwatchdog
# checks whether an email report should be sent or not. This minimum priority
# must be lower than the critical and medium priority levels.
#
# Default: 10,604800
#error_report_low_priority=10,604800


# error_report_medium_priority=<priority>[,<span>]
#
# Errors with a priority higher or equal to error_report_medium_priority
# and lower than error_report_critical_priority are send with a frequency of
# <span> seconds.
# 
# By default the medium priority is 50. The minimum is equal to the low
# priority (which by default is 10.) The maximum is equal to the critical
# priority.
#
# If this parameters priority is set equal to the critical priority then
# the medium priority is ignored.
#
# The minimum <span> is one hour. The maximum is equal to the <span>
# defined in the error report low span parameter.
#
# Default: 50,259200
#error_report_medium_priority=50,259200


# error_report_critical_priority=<priority>[,<span>]
#
# Errors with a priority higher or equal to error_report_critical_priority
# are send with a frequency of <span> seconds.
# 
# By default the critical priority is 90. The minimum is equal to the medium
# priority (which by default is 50.) The maximum is 100. This means an error
# with a priority of 100 (the maximum possible priority) is always going to
# be considered critical.
#
# The minimum <span> is five minutes. The maximum is equal to the <span>
# defined in the error report medium span parameter.
#
# Default: 90,86400
#error_report_critical_priority=90,86400


# plugins_path=<path to the snapwatchdog plugins>
#
# This variable holds the folder with the watchdog plugins.
#
# If you are a developer, you may want to change this path to your
# developer BUILD directory.
#
# Default: /usr/lib/snapwebsites/watchdog_plugins
plugins_path=/usr/lib/snapwebsites/watchdog_plugins


# plugins=<name, name, ...>
#
# The list of watchdog plugins to load to watch this server.
#
# * apt -- check status of packages
# * cassandra -- check that cassandra is running and healthy
# * cpu -- check CPU load
# * disk -- check disk usage
# * firewall -- check that snapfirewall is running and the firewall is ON
# * flags -- check for flags that were raised by various sub-processes
# * log -- check the size, mode, uid, gid of log files
# * memory -- check memory/swap usage
# * network -- check network connectivity
# * packages -- check required, unwanted, conflicting packages
# * processes -- check that processes are running
# * watchscripts -- run various scripts
#
# WARNING: Contrary to the snapserver, this "plugins" variable MUST be
#          defined
#
# Default: apt,cpu,disk,flags,log,memory,network,packages,processes,watchscripts
plugins=apt,cpu,disk,flags,log,memory,network,packages,processes,watchscripts


# log_path=<path to save log files>
#
# This is the path to the log directory used by this daemon.
#
# Note that it is also defined in the .properties file. You should
# keep both in sync.
#
# The output from running the snapwatchdog scripts is saved under a
# sub-folder named "scripts-output" in this folder. We use a sub-folder
# because the number of files can become quite large as so many files
# are going to be used and we run logrotate once per run to make sure
# that files get rotated as expected by this feature.
#
# If you change this path or the `log_subfolder` variable, then
# you must make sure that the new directory gets rotated.
#
# Default: /var/log/snapwebsites
log_path=/var/log/snapwebsites


# log_subfolder=<path to the snapwatchdog sub-folder>
#
# When snapwatchdog runs external scripts, it saves the output in
# log files. The output should be non-existant when no errors are
# detected. Those log files are saved under the path defined in
# `log_path` and `log_subfolder`.
#
#    log_path + "/" + log_subfolder + "/" + "snapwatchdog-scripts.log"
#
# If you change this sub-folder name or the `log_path` variable, then
# you must make sure that the new directory gets rotated.
#
# Default: snapwatchdog-output
log_subfolder=snapwatchdog-output


# data_path=<path to data directory>
#
# Path to where the watchdog saves its gathered data while running.
# (counters, statistics, errors, etc.)
#
# By default, we set this variable to this path:
#
#     /var/lib/snapwebsites/snapwatchdog
#
# However, the default when not set is the empty string which means:
# do not save the output anywhere (in case you wanted to save a few
# Mb of space on your hard drive, it still gets saved in the database
# when present.)
#
# \li The general plugin data is saved under .../data
# \li The RUSAGE data is saved under .../rusage
#
# Default:
data_path=/var/lib/snapwebsites/snapwatchdog


# cache_path=<path to permanent cache>
#
# This variable is expected to be set to a full directory path that
# represents a permanent (durable) cache for snapwatchdog.
#
# At the moment it is used to save temporary data from various plugins,
# data that is required to persist between runs. However, that data is
# not so important that it could not get deleted once in a while. Remember
# that files that are over 1 month old get deleted from the cache folder.
#
# This path should be different from the library path (/var/lib/snapwebsites)
# as the data saved here may safely be deleted and the server will recover
# the data in time.
#
# Default: /var/cache/snapwebsites/snapwatchdog
cache_path=/var/cache/snapwebsites/snapwatchdog


# user_group=<user>:<group>
#
# Define the name of the user and group that should own the journal files.
#
# This is particularly useful for programmers who are very likely to end
# up with file ownership which match their own account and not the
# snapwebsites account. In all other circumstances, the default should
# suffice for you.
#
# Default: snapwebsites:snapwebsites
#user_group=snapwebsites:snapwebsites


# watchdog_processes_path=<path to process XML files>
#
# This variable defines the path to a directory holding XML files.
# The XML files define processes that have to be running on this machine.
#
# Default: /usr/share/snapwebsites/snapwatchdog/processes
watchdog_processes_path=/usr/share/snapwebsites/snapwatchdog/processes


# watchdog_log_definitions_path=<path to log definitions>
#
# The path to a set of XML files defining various log files to be checked
# by the snapwatchdog log plugin and daemon.
#
# At the moment, these files are not expected to be edited.
#
# Default: /usr/share/snapwebsites/snapwatchdog/log-definitions
watchdog_log_definitions_path=/usr/share/snapwebsites/snapwatchdog/log-definitions


# watchdog_packages_path=<path to package definitions>
#
# The path to a set of XML files defining various requirements to do with
# packages. There are currently these possible requirements:
#
#   . the package may be installed (optional)
#   . the package must be installed (required)
#   . the package must NOT be installed (unwanted)
#   . conflicts with an installed package
#
# For example, the `ntpdate` package generates problem to the `ntp`
# package. At times, `ntpd` fails to restart because `ntpdate`
# is running. Therefore, these two packages are considered to be in
# conflict. Also `ntp` is a required package.
#
# Default: /usr/share/snapwebsites/snapwatchdog/packages
watchdog_packages_path=/usr/share/snapwebsites/snapwatchdog/packages


# from_email=<email address>
#
# Define the "From: ..." email when snapwatchdog is to send emails, which
# it does whenever it detects a problem (i.e. CPU clamped at 100%, heavy
# swapping, processes not running, processes running "forever", etc.)
#
# Until this email and administrator_email are both defined, no email will
# be sent by snapwatchdogserver.
#
# Default: <none> (but required for the email mechanism to work)
from_email=


# administrator_email=<email address>
#
# The administrator email is the one address where problems discovered by
# the snapwatchdogserver are sent. If you want multiple people to receive
# those emails, then create a list in postfix. For example, you could
# define an email such as `snapwatchdog@example.com` and then forward
# emails sent to that address to all your administrators.
#
# Until this email and from_email are both defined, no email will be
# sent by snapwatchdogserver.
#
# Default: <none> (but required for the email mechanism to work)
administrator_email=


# watch_script_starter=<path to the watch script start>
#
# The watchscripts plugin runs shell scripts and other utilities to
# check the health of your installation. To start these scripts with
# a viable environment, it offers a starter script which loads
# defaults (/etc/default/snapwatchdog) and thus can be adjust to
# with with your environment.
#
# For example, in the developer's environment, I like to add the
# BUILD/snapwebsites/snapwatchdog/tools path to the PATH variable.
# That way I don't have to install the snapwatchdog tools to my
# normal environment (i.e. under /usr/bin) especially as I am
# working on those tools and the Snap! environment in general.
#
# Default: /usr/sbin/watch_script_starter
#watch_script_starter=/usr/sbin/watch_script_starter


# watchdog_watchscripts_path=<path to list of scripts>
#
# This variable holds the path to the list of scripts. This is a directory
# where the snapwatchdog and other projects put scripts that are used to
# verify that the system is sane. Each project can add any number of
# scripts.
#
# You project should name its scripts with a "namespace" so you
# do not take the risk of overwriting another project's script. For
# example, the firewall script to verify that fail2ban-client is not
# running and using 100% of the CPU for ever is called:
#
#    watch_firewall_fail2ban_client
#
# The "watch_" at the start is used to mark the script as a snapwatchdog
# script.
#
# The "firewall_" is the namespace.
#
# The "fail2ban_client" is what that script is for.
#
# Default: /usr/share/snapwebsites/snapwatchdog/scripts
#watchdog_watchscripts_path=/usr/share/snapwebsites/snapwatchdog/scripts


# watchdog_watchscripts_output=<path to script file output>
#
# The watchdog scripts may need to memorize various information
# while running their tests. i.e. some tests may need to run
# over a long period of time and the state of that script will
# be found in this folder.
#
# Each script output filename should include its project name and a
# script name so each file remains unique.
#
# Note that regular script output and errors are saved in log files
# instead and those log files go under the path defined by:
#
#    log_path + "/" + log_subfolder
#
# Default: /var/lib/snapwebsites/snapwatchdog/script-files
#watchdog_watchscripts_output=/var/lib/snapwebsites/snapwatchdog/script-files


# disk_ignore=<partition regex>:...
#
# A list of colon separated regular expressions to ignore partitions for
# errors in link with filled up partitions (i.e. the "disk" plugin will
# generate errors once a partition is filled at 90% or more.)
#
# For example, we internally ignore partitions that match this regular
# expression:
#
#     "^/snap/core/"
#
# You can enter multiple regular expressions by separating them with a
# colon. If you need to support a colon in the regular expression, use
# the character escape "\072" instead.
#
# Default: <empty>
disk_ignore=


# vim: wrap
