<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:annotation>
    <xsd:documentation>
      XML Schema for Watchdog Processes files.
      Last Modified 2018-07-13
    </xsd:documentation>
  </xsd:annotation>

  <xsd:element name="watchdog-processes">
    <xsd:annotation>
      <xsd:documentation>
        Container for a set of process elements.
        This is the root element of the XML file.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:choice minOccurs="0" maxOccurs="unbounded">
        <xsd:element name="process" type="tProcess"/>
      </xsd:choice>
    </xsd:complexType>
  </xsd:element>

  <xsd:complexType name="tProcess">
    <xsd:annotation>
      <xsd:documentation>
        Declaration of one expected or mandatory process.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:all>
      <xsd:element name="command" type="tCommand" minOccurs="0" maxOccurs="1"/>
      <xsd:element name="service" type="tService" minOccurs="0" maxOccurs="1"/>
      <xsd:element name="match" type="tMatch" minOccurs="0" maxOccurs="1"/>
    </xsd:all>
    <xsd:attribute name="name" type="name"/>
    <xsd:attribute name="mandatory" type="tMandatory" use="optional"/>
    <xsd:attribute name="allow_duplicates" type="tAllowDuplicates" use="optional"/>
  </xsd:complexType>

  <xsd:simpleType name="tMandatory">
    <xsd:restriction base="name">
      <xsd:enumeration value="mandatory"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="tAllowDuplicates">
    <xsd:restriction base="name">
      <xsd:enumeration value="allow_duplicates"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="tCommand">
    <xsd:annotation>
      <xsd:documentation>
        Define the name of the terminal command. This is the basename
        only, no path. If you need to test a whole path, use the
        &lt;match&gt; tag instead with something like:

        (^/path/to/command/and/command$)|(^/path/to/command/and/command\s+)

        Note that both, a &lt;match&gt; and &lt;command&gt; tags are
        allowed for the same process. In that case both will be checked
        against each process found running at the time the processes
        plugin is started.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>

  <xsd:simpleType name="tServiceContent">
    <xsd:annotation>
      <xsd:documentation>
        See tService. This simple type only defines the content.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>

  <xsd:complexType name="tService">
    <xsd:annotation>
      <xsd:documentation>
        Define the name of the service that runs this process. This is
        the exact same name you use with systemctl. The watchdog system
        will check whether the service is currently enabled. If enabled
        then the process must be running. If not enabled, then it is
        expected the the process won't be running and as a result it
        doesn't even get checked.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="tServiceContent">
        <xsd:attribute name="backend" type="tBackend" use="optional"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:simpleType name="tBackend">
    <xsd:restriction base="name">
      <xsd:enumeration value="backend"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="tMatch">
    <xsd:annotation>
      <xsd:documentation>
        Defines a regular expression which matches the complete
        command line of the process while running.

        This is particularly useful when testing software that
        get started using an interpreter such as Java, Python,
        JavaScript, etc.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>

  <xsd:simpleType name="name">
    <xsd:annotation>
      <xsd:documentation>
        A valid name composed of letters, digits and underscores.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[a-zA-Z_][a-zA-Z0-9_]*"/>
    </xsd:restriction>
  </xsd:simpleType>
</xsd:schema>
<!--
vim: ts=2 sw=2 et
-->
