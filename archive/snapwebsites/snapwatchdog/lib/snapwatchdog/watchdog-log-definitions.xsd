<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:annotation>
    <xsd:documentation>
      XML Schema for Watchdog Log Definition files.
      Last Modified 2018-07-27
    </xsd:documentation>
  </xsd:annotation>

  <xsd:element name="watchdog-log-definitions">
    <xsd:annotation>
      <xsd:documentation>
        Container for a set of log elements.
        This is the root element of the XML file.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:choice minOccurs="0" maxOccurs="unbounded">
        <xsd:element name="log" type="tLog"/>
      </xsd:choice>
    </xsd:complexType>
  </xsd:element>

  <xsd:complexType name="tLog">
    <xsd:annotation>
      <xsd:documentation>
        Declaration of one log path. The pattern may define references
        to many log files.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:all>
      <xsd:element name="path" type="tPath" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="pattern" type="tPattern"/>
      <xsd:element name="max-size" type="tMaxSize"/>
      <xsd:element name="max-age" type="tMaxAge"/>
      <xsd:element name="owner-name" type="name" minOccurs="0"/>
      <xsd:element name="group-name" type="name" minOccurs="0"/>
      <xsd:element name="mode" type="tMode" minOccurs="0"/>
      <xsd:element name="search" type="tSearch" minOccurs="0" maxOccurs="1"/>
    </xsd:all>
    <xsd:attribute name="name" type="name"/>
    <xsd:attribute name="mandatory" type="tMandatory" use="optional"/>
    <xsd:attribute name="secure" type="tSecure" use="optional"/>
  </xsd:complexType>

  <xsd:simpleType name="tMandatory">
    <xsd:restriction base="name">
      <xsd:enumeration value="mandatory"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="tSecure">
    <xsd:restriction base="name">
      <xsd:enumeration value="secure"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="tPath">
    <xsd:annotation>
      <xsd:documentation>
        Define the path where logs are to be found. The pattern is used to
        search for the actual logs.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>

  <xsd:simpleType name="tPattern">
    <xsd:annotation>
      <xsd:documentation>
        A list of patterns that are used to search for a log files within
        the path.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>

  <xsd:simpleType name="tMaxSize">
    <xsd:annotation>
      <xsd:documentation>
        The maximum size of these log files.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[0-9]+[kmgKMG][bB]"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="tMaxAge">
    <xsd:annotation>
      <xsd:documentation>
        The maximum number of days the file can be kept. The age test reads
        the oldest log file and check for a date (the first it finds should
        represents the age of the file.) If that date was more than the
        number of days defined by the max-age tag then the file gets
        reported.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:integer"/>
  </xsd:simpleType>

  <xsd:simpleType name="tMode">
    <xsd:annotation>
      <xsd:documentation>
        The mode the file is expected to have. You may include a mask which
        means that you do not have to test all the bits. You may also use
        letters (as in chmod(1)) to specify the mode and mask.

        The numeric syntax uses one or two octal numbers of 3 or 4 digits
        seperated by a slash. For example, the following makes sure that
        only the user (owner of the file) has write permissions and
        that all execution permissions are turned off:

          0200/0333

        On the other hand, you could forcibly want the file to have this
        exact mode:

          0640

        The letters are defined with three parts:

          &lt;who&gt;&lt;operator&gt;&lt;perms&gt;

        where:

          &lt;who&gt; -- defines which section of the permissions are being
          checked, the supported sections are:

            . u -- the user (owner) of the mode (0700)
            . g -- the group of the mode (0070)
            . o -- the others of the mode (0007)
            . a -- all of them (0777)

          &lt;operator&gt; -- defines how the flags are going to be used;
          these are slight different from the chmod command line tool

            . + -- the specified flags must be set for that specific user
            . - -- the specified flags must not be set for that specific user
            . = -- the specified flags must match one to one

          &lt;perms&gt; -- defines a set of permissions that are to be set
          or not; these are:

            . r -- the read flag (444)
            . w -- the write flag (222)
            . x -- the execute flag (111)
            . s -- the user or group flag (6000)
            . t -- the sticky flag (1000)

          the r/w/x flags are ANDed as is with the ugoa flags; the 's' flag
          is 4000 if 'u' or 'a' were specified, and 2000 if 'g' or 'a' were
          specified; the 't' is always added if present

          You do not specified a mode mask with letters, instead the operator
          defines it for you. The '+' uses the mode as is, the '-' uses the
          mode as is and then set the mode itself to zero; the '=' sets the
          mask to 07777. If you need something different, you may have to
          use the numeric syntax instead, especially because we do not support
          multiple entries. So the example above (0640) can't be represented
          with the letters scheme.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:integer"/>
  </xsd:simpleType>

  <xsd:complexType name="tSearch">
    <xsd:annotation>
      <xsd:documentation>
        Define the name of the service that runs this process. This is
        the exact same name you use with systemctl. The watchdog system
        will check whether the service is currently enabled. If enabled
        then the process must be running. If not enabled, then it is
        expected the the process won't be running and as a result it
        doesn't even get checked.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:all>
      <xsd:element name="regex" type="tRegex" minOccurs="1"/>
    </xsd:all>
  </xsd:complexType>

  <xsd:simpleType name="tRegexContent">
    <xsd:annotation>
      <xsd:documentation>
        See tRegex. This simple type only defines the content.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>

  <xsd:complexType name="tRegex">
    <xsd:annotation>
      <xsd:documentation>
        A regex used to check the log contents, one line at a time.
        When a match is found, the report-as is used to know how it
        will get reported to the administrator.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="tRegexContent">
        <xsd:attribute name="report-as" type="tReportAs" use="optional" default="error"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:simpleType name="tReportAs">
    <xsd:restriction base="name">
      <xsd:enumeration value="debug"/>
      <xsd:enumeration value="info"/>
      <xsd:enumeration value="warning"/>
      <xsd:enumeration value="error"/>
      <xsd:enumeration value="fatal_error"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="name">
    <xsd:annotation>
      <xsd:documentation>
        A valid name composed of letters, digits and underscores.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[a-zA-Z_][a-zA-Z0-9_]*"/>
    </xsd:restriction>
  </xsd:simpleType>
</xsd:schema>
<!--
vim: ts=2 sw=2 et
-->
